box:
  id: ubuntu

# Build definition
build:
  docker: true
  # The steps that will be executed on build
  steps:

    # install docker, fn and start fn server
    - script:
        name: fn server
        code: |
          sudo apt-get -y update && sudo apt-get -y install curl
          curl -vfsSL get.docker.com | sh
          curl -vLSs https://raw.githubusercontent.com/fnproject/cli/master/install | sh
          nohup fn start > /tmp/fn.log 2>&1 &
    # test fn
    - script:
        name: fn client
        code: |
          fn init --runtime go hello
          cd hello
          fn run
    - script:
        name: test docker cli
        code: |
          docker run hello-world
          
test-fn2:
  # Simple Fn use case in which we start the fn server (using the local docker rather than docker in docker) and build, deploy and call a function
  box: alpine:edge
  docker: true
  steps:
    - script:
        name: Install wget
        code: apk --no-cache add wget    
    - script:
        name: Install Curl
        code: apk --no-cache add curl     
    - script:
        name: Install docker CLI (needed by Fn)
        code: apk --no-cache add docker    
    - script:
        name: Start fn server (using local docker, not using DinD)
        code: |
          docker kill functions 2> /dev/null | true
          docker run -d --rm --name functions --network=$DOCKER_NETWORK_NAME -e FN_DOCKER_NETWORKS=$DOCKER_NETWORK_NAME -v /var/run/docker.sock:/var/run/docker.sock -v $PWD/data:/app/data -p 8080:8080 fnproject/fnserver 
          # need to allow time for the fn server to start - the next step is slow which should give it enough time
    - script:
        name: Install fn CLI (do this once for all the fn pipelines)
        code: |
          mkdir $WERCKER_ROOT/fn
          cd $WERCKER_ROOT/fn
          wget --no-verbose https://github.com/fnproject/cli/releases/download/0.4.117/fn_alpine  # need to replace with a URI to the latest version
          mv fn_alpine fn
          chmod a+x $WERCKER_ROOT/fn/fn 
          export PATH=$WERCKER_ROOT/fn:$PATH
          fn --version
    - script: 
        name: Login to Docker Hub (so we can deploy the function to it)
        code: docker login -u $USERNAME -p $PASSWORD
    - script:
        name: Build and deploy function to Docker Hub
        code: |
          #
          echo $DOCKER_HOST
          docker ps --no-trunc
          sleep 5
          echo Trying to contact fn server
          docker ps
          ping -c 3 functions
          curl functions:8080
          #
          cd $WERCKER_ROOT/test-fn2
          export FN_REGISTRY=docker.io/$USERNAME
          export FN_API_URL=http://functions:8080
          fn deploy --app myapp 
    - script:
        name: List deployed functions
        code: |
          fn list routes myapp
    - script:
        name: Invoke the function and verify it returns the expected results
        code: |
            if curlOutput=`curl -s functions:8080/r/myapp/test-fn2`; then 
                export expected='{"message":"Hello World"}'
                if [ "$curlOutput" == "$expected" ]; then
                    echo "Test passed: function gave expected response: " $expected
                else
                    echo "Test failed: function gave unexpected response: " $curlOutput
                    echo "The expected response was: " $expected
                    exit 1
                fi   
            else 
                echo "Test failed: function did not respond"
                exit 1
            fi   
  after-steps:
    - script:
        name: Clean up
        code: |
          # kill fn server (don't fail if there isn't one)
          docker kill functions 2> /dev/null | true          
